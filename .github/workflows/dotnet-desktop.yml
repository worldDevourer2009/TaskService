# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will build and test a .NET application.
# You can uncomment and adjust the WAP/UWP packaging steps if needed.

name: .NET Core Desktop

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: taskhandler
          POSTGRES_USER: taskhandler_user
          POSTGRES_PASSWORD: taskhandler_password
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready --username=taskhandler_user --dbname=taskhandler"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
    
    strategy:
      matrix:
        dotnet-version: [ '7.0.x' ]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ matrix.dotnet-version }}

      - name: Restore dependencies
        run: dotnet restore

      - name: Build solution
        run: dotnet build --no-restore --configuration Release

      - name: Wait for Postgres service
        run: |
          echo "Waiting for PostgreSQL to be ready..."
          while ! pg_isready -h localhost -p 5432 -U taskhandler_user; do
            sleep 2
          done

      - name: Run tests
        env:
          ConnectionStrings__DefaultConnection: >-
            Host=localhost;
            Port=5432;
            Database=taskhandler;
            Username=taskhandler_user;
            Password=taskhandler_password;
          JwtSettings__Issuer: ${{ secrets.JWT_ISSUER }}
          JwtSettings__Audience: ${{ secrets.JWT_AUDIENCE }}
          JwtSettings__Key: ${{ secrets.JWT_KEY }}
        run: |
          dotnet test --no-build --configuration Release \
            --logger "trx;LogFileName=test_results.trx" \
            --results-directory ./TestResults

      - name: Upload Test Results
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: ./TestResults
 